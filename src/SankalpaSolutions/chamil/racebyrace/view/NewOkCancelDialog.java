/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SankalpaSolutions.chamil.racebyrace.view;

import SankalpaSolutions.chamil.racebyrace.controller.CountryController;
import SankalpaSolutions.chamil.racebyrace.controller.HorseController;
import SankalpaSolutions.chamil.racebyrace.controller.PoraController;
import SankalpaSolutions.chamil.racebyrace.controller.RaceCardController;

import SankalpaSolutions.chamil.racebyrace.model.Country;
import SankalpaSolutions.chamil.racebyrace.model.Horse;
import SankalpaSolutions.chamil.racebyrace.model.Pora;
import SankalpaSolutions.chamil.racebyrace.model.RaceCard;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author Win 8
 */
public class NewOkCancelDialog extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form NewOkCancelDialog
     */
    public NewOkCancelDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SankalpaSolutions/chamil/racebyrace/images/check.gif"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setText("jLabel2");

        jLabel3.setText(".");

        jButton2.setText("Test");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Horse Race");

        jLabel5.setText("Computer");

        jButton4.setText("Test");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Submit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator2)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(73, 73, 73))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton)
                                .addContainerGap())))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        jProgressBar1.setVisible(true);
        new Thread(new Runnable() {

            public void run() {
                System.gc();

                for (int i = 0; i < 101; i++) {

                    try {
                        jProgressBar1.setValue(i);
                        jLabel2.setText(i + " %");

                        if (i <= 18) {
                            //                            Thread.sleep(500);
                            Thread.sleep(50);

                        } else if (i <= 83) {
                            //                            Thread.sleep(1000);
                            Thread.sleep(100);

                        } else if (i <= 100) {
                            //                            Thread.sleep(200);
                            Thread.sleep(20);

                        }

                        if (i == 100) {

                        }

                    } catch (Exception e) {
                    }
                }
            }
        }).start();

        new Thread(new Runnable() {

            public void run() {
                System.gc();

                try {

                    //delete all country and pora before next day   
                    CountryController.TruncateHorse();
                    CountryController.TruncatePora();
                    CountryController.TruncateCountry();

                    FileReader fr = null;
                    BufferedReader br = null;
                    try {
                        fr = new FileReader("D:\\scan\\2018.12.19/1.txt");
                        br = new BufferedReader(fr);
                    } catch (FileNotFoundException e) {
                        System.out.println("File Not Found");
                    }
                    String lines;
                    int Country = 1;
                    StringBuffer sb1 = null;
                    String racePora = null;
                    String horseName = null;
                    String counter = null;
                    int maxCountryId = 0;
                    try {

                        while ((lines = br.readLine()) != null) {
                            //String s2=lines;
                            // String after = lines.trim().replaceAll(" +", " ");

                            // String nameWithProperSpacing = lines.replaceAll("\\s+", " ");
                            //String s1 = new String(lines.replaceAll("\\s+", " "));
                            String s2 = new String(lines.replaceAll("'", ""));

//                              System.out.println("?>> > : " + lines);
                            if (!s2.equals("")) {

                                char ch = s2.charAt(0);
                                if (Character.isLetter(ch)) {
                                    sb1 = new StringBuffer();

                                    sb1.append(ch).trimToSize();
                                    try {

                                        for (int i = 0; i < sb1.length(); i++) {
                                            Country cntry = new Country(Country, lines.trim());

                                            //  System.out.println("countr : "+lines.trim());
                                            CountryController.addCountry(cntry);
                                            Country++;
                                        }
                                    } catch (Exception ex) {
                                        Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                                char ch2 = s2.charAt(0);
                                char ch3 = s2.charAt(1);

                                if (ch == '(') {
                                    String temp = Character.toString(s2.charAt(1));
                                    if (sb1.toString().equals(temp)) {
                                        try {

                                            maxCountryId = CountryController.serchMaxCountryId();

                                            // int poraNumber = Integer.parseInt("" + s2.charAt(3));
//                                             System.out.println(""+s2.charAt(3));
                                            String poras = "" + s2.charAt(1) + s2.charAt(2) + "" + s2.charAt(3);

                                            String closeBracket = "" + s2.charAt(4);
                                            if (s2.charAt(4) == ')') {
                                                String aa = poras.replaceAll("\\s+", "");
                                                String pp = aa.replaceAll("'", "");

                                                Pora pora = new Pora(null, maxCountryId - 1, pp);
                                                System.out.println("|| " + pp);

                                                PoraController.addPora(pora);
                                            } else if (s2.charAt(5) == ')') {
                                                String poras3 = "" + s2.charAt(1) + s2.charAt(2) + "" + s2.charAt(3) + s2.charAt(4);
                                                String dd = poras3.replaceAll("\\s+", "");
                                                String ee = dd.replaceAll("'", "");

                                                Pora pora = new Pora(null, maxCountryId - 1, ee);
                                                System.out.println("<< " + ee);

                                                PoraController.addPora(pora);
                                            } else {
                                                String poras2 = "" + s2.charAt(1) + s2.charAt(2) + "" + s2.charAt(3) + s2.charAt(4) + s2.charAt(5);
                                                String bb = poras2.replaceAll("\\s+", "");
                                                String cc = bb.replaceAll("'", "");
                                                Pora pora = new Pora(null, maxCountryId - 1, cc);
                                                System.out.println(">> " + cc);

                                                PoraController.addPora(pora);
                                            }

                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }

                                if (!Character.isLetter(ch2)) {

                                    if (ch2 == '(') {

                                        racePora = "" + s2.charAt(1) + s2.charAt(2) + "/" + s2.charAt(3);

                                    } else {

                                        if (!Character.isLetter(ch2)) {
                                            if (!Character.isLetter(ch3)) {

                                                horseName = "" + s2.substring(2);
                                                counter = s2.substring(0, 2);

                                            } else {
                                                horseName = s2.substring(1);
                                                counter = s2.substring(0, 1);

                                            }

                                        }
                                        int RaceCountry = Country - 1;
                                        try {
                                            jLabel3.setText(horseName);
                                            System.out.println("?>> > : " + counter.trim() + " " + horseName);
                                            int horse_counter = Integer.parseInt(counter.trim());
                                            Horse horse = new Horse(null, horseName, PoraController.serchMaxPoraId() - 1, maxCountryId - 1, horse_counter);
                                            HorseController.addHorse(horse);
                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            }

                        }

                    } catch (IOException e) {
                        //
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }).start();


    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        jProgressBar1.setVisible(true);
        new Thread(new Runnable() {

            public void run() {
                System.gc();

                for (int i = 0; i < 101; i++) {

                    try {
                        jProgressBar1.setValue(i);
                        jLabel2.setText(i + " %");

                        if (i <= 18) {
                            //                            Thread.sleep(500);
                            Thread.sleep(50);

                        } else if (i <= 83) {
                            //                            Thread.sleep(1000);
                            Thread.sleep(100);

                        } else if (i <= 100) {
                            //                            Thread.sleep(200);
                            Thread.sleep(20);

                        }

                        if (i == 100) {

                        }

                    } catch (Exception e) {
                    }
                }
            }
        }).start();

        new Thread(new Runnable() {

            public void run() {
                System.gc();

                try {

                    //delete all country and pora before next day   
                    CountryController.TruncateHorse();
                    CountryController.TruncatePora();
                    CountryController.TruncateCountry();

                    FileReader fr = null;
                    BufferedReader br = null;
                    try {
                        fr = new FileReader("D:\\scan\\2018.12.19/1.txt");
                        br = new BufferedReader(fr);
                    } catch (FileNotFoundException e) {
                        System.out.println("File Not Found");
                    }
                    String lines;
                    int Country = 1;
                    StringBuffer sb1 = null;
                    String racePora = null;
                    String horseName = null;
                    String counter = null;
                    int maxCountryId = 0;
                    try {

                        while ((lines = br.readLine()) != null) {
                            //String s2=lines;
                            // String after = lines.trim().replaceAll(" +", " ");

                            // String nameWithProperSpacing = lines.replaceAll("\\s+", " ");
                            //String s1 = new String(lines.replaceAll("\\s+", " "));
                            String s2 = new String(lines.replaceAll("'", ""));

//                              System.out.println("?>> > : " + lines);
                            if (!s2.equals("")) {

                                char ch = s2.charAt(0);
                                if (Character.isLetter(ch)) {
                                    sb1 = new StringBuffer();

                                    sb1.append(ch).trimToSize();
                                    try {

                                        for (int i = 0; i < sb1.length(); i++) {
                                            Country cntry = new Country(Country, lines.trim());

                                            //  System.out.println("countr : "+lines.trim());
                                            // CountryController.addCountry(cntry);
                                            Country++;
                                        }
                                    } catch (Exception ex) {
                                        Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                                char ch2 = s2.charAt(0);
                                char ch3 = s2.charAt(1);

                                if (ch == '(') {
                                    String temp = Character.toString(s2.charAt(1));
                                    if (sb1.toString().equals(temp)) {
                                        try {

                                            maxCountryId = CountryController.serchMaxCountryId();

                                            // int poraNumber = Integer.parseInt("" + s2.charAt(3));
//                                             System.out.println(""+s2.charAt(3));
                                            String poras = "" + s2.charAt(1) + s2.charAt(2) + "" + s2.charAt(3);

                                            String closeBracket = "" + s2.charAt(4);
                                            if (s2.charAt(4) == ')') {
                                                String aa = poras.replaceAll("\\s+", "");
                                                String pp = aa.replaceAll("'", "");

                                                Pora pora = new Pora(null, maxCountryId - 1, pp);
                                                System.out.println("|| " + pp);

                                                //  PoraController.addPora(pora);
                                            } else if (s2.charAt(5) == ')') {
                                                String poras3 = "" + s2.charAt(1) + s2.charAt(2) + "" + s2.charAt(3) + s2.charAt(4);
                                                String dd = poras3.replaceAll("\\s+", "");
                                                String ee = dd.replaceAll("'", "");

                                                Pora pora = new Pora(null, maxCountryId - 1, ee);
                                                System.out.println("<< " + ee);

                                                // PoraController.addPora(pora);
                                            } else {
                                                String poras2 = "" + s2.charAt(1) + s2.charAt(2) + "" + s2.charAt(3) + s2.charAt(4) + s2.charAt(5);
                                                String bb = poras2.replaceAll("\\s+", "");
                                                String cc = bb.replaceAll("'", "");
                                                Pora pora = new Pora(null, maxCountryId - 1, cc);
                                                System.out.println(">> " + cc);

                                                // PoraController.addPora(pora);
                                            }

                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }

                                if (!Character.isLetter(ch2)) {

                                    if (ch2 == '(') {

                                        racePora = "" + s2.charAt(1) + s2.charAt(2) + "/" + s2.charAt(3);

                                    } else {

                                        if (!Character.isLetter(ch2)) {
                                            if (!Character.isLetter(ch3)) {

                                                horseName = "" + s2.substring(2);
                                                counter = s2.substring(0, 2);

                                            } else {
                                                horseName = s2.substring(1);
                                                counter = s2.substring(0, 1);

                                            }

                                        }
                                        int RaceCountry = Country - 1;
                                        try {
                                            jLabel3.setText(horseName);
                                            System.out.println("?>> > : " + counter.trim() + " " + horseName);
                                            int horse_counter = Integer.parseInt(counter.trim());
                                            Horse horse = new Horse(null, horseName, PoraController.serchMaxPoraId() - 1, maxCountryId - 1, horse_counter);
                                            // HorseController.addHorse(horse);
                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            }

                        }

                    } catch (IOException e) {
                        //
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }).start();


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jProgressBar1.setVisible(true);
        new Thread(new Runnable() {

            public void run() {
                System.gc();

                for (int i = 0; i < 101; i++) {

                    try {
                        jProgressBar1.setValue(i);
                        jLabel2.setText(i + " %");

                        if (i <= 18) {
                            //                            Thread.sleep(500);
                            Thread.sleep(50);

                        } else if (i <= 83) {
                            //                            Thread.sleep(1000);
                            Thread.sleep(100);

                        } else if (i <= 100) {
                            //                            Thread.sleep(200);
                            Thread.sleep(20);

                        }

                        if (i == 100) {

                        }

                    } catch (Exception e) {
                    }
                }
            }
        }).start();

        new Thread(new Runnable() {

            public void run() {
                System.gc();

                try {

                    //delete all country and pora before next day   
                    CountryController.TruncateHorse();
                    CountryController.TruncatePora();
                    CountryController.TruncateCountry();

                    FileReader fr = null;
                    BufferedReader br = null;
                    try {
                        fr = new FileReader("D:\\scan\\2018.12.19/3.txt");
                        br = new BufferedReader(fr);
                    } catch (FileNotFoundException e) {
                        System.out.println("File Not Found");
                    }
                    String lines;
                    int Country = 1;
                    StringBuffer sb1 = null;
                    String racePora = null;
                    String horseName = null;
                    String counter = null;
                    int maxCountryId = 0;
                    try {

                        while ((lines = br.readLine()) != null) {
                            //String s2=lines;
                            // String after = lines.trim().replaceAll(" +", " ");

                            // String nameWithProperSpacing = lines.replaceAll("\\s+", " ");
                            //String s1 = new String(lines.replaceAll("\\s+", " "));
                            String s2 = new String(lines.replaceAll("'", ""));

//                              System.out.println("?>> > : " + lines);
                            if (!s2.equals("")) {

                                char ch = s2.charAt(0);
                                if (Character.isLetter(ch)) {
                                    if (!lines.substring(2, 3).equals("/")) {
//                                        System.out.println("chamil" + lines.substring(2, 3));

                                        sb1 = new StringBuffer();

                                        sb1.append(ch).trimToSize();
                                        try {

                                            for (int i = 0; i < sb1.length(); i++) {
                                                Country cntry = new Country(Country, lines.trim());

                                                System.out.println("countr : " + lines.trim());
                                                //CountryController.addCountry(cntry);
                                                Country++;
                                            }
                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }

                                char ch2 = s2.charAt(0);
                                char ch3 = s2.charAt(1);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                if (Character.isLetter(ch)) {
                                    if (lines.substring(2, 3).equals("/")) {
                                        // System.out.println("pora" + lines.substring(2, 3));
                                        maxCountryId = CountryController.serchMaxCountryId();

                                        if (s2.charAt(4) == ' ') {
                                            String poras = "" + s2.charAt(0) + s2.charAt(1) + "" + s2.charAt(2) + "" + s2.charAt(3);
                                            String aa = poras.replaceAll("\\s+", "");
                                            String pp = aa.replaceAll("'", "");
                                            String kk = pp.replaceAll("/", "");

                                            Pora pora = new Pora(null, maxCountryId - 1, pp);
                                            // System.out.println("|| " + pp);
                                            System.out.println("|| " + kk);
                                        } else if (s2.charAt(5) == ' ') {
                                            String poras = "" + s2.charAt(0) + s2.charAt(1) + "" + s2.charAt(2) + "" + s2.charAt(3) + "" + s2.charAt(4);
                                            String aa = poras.replaceAll("\\s+", "");
                                            String pp = aa.replaceAll("'", "");
                                            String kk = pp.replaceAll("/", "");

                                            Pora pora = new Pora(null, maxCountryId - 1, pp);
                                            // System.out.println("|| " + pp);
                                            System.out.println(">> " + kk);
                                        }

                                    }
                                }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                if (!Character.isLetter(ch2)) {

                                    if (ch2 == '(') {

                                        if (s2.substring(2, 3).equals(")")) {
                                            horseName = "" + s2.substring(3);
                                            counter = s2.substring(1, 2);
                                        } else if (s2.substring(3, 4).equals(")")) {
                                            horseName = "" + s2.substring(4);
                                            counter = s2.substring(1, 3);
                                        }

//                                        if (!Character.isLetter(ch2)) {
//                                            if (!Character.isLetter(ch3)) {
//
//                                                horseName = "" + s2.substring(2);
//                                                counter = s2.substring(0, 2);
//
//                                            } else {
//                                                horseName = s2.substring(1);
//                                                counter = s2.substring(0, 1);
//
//                                            }
//
//                                        }
                                        int RaceCountry = Country - 1;
                                        try {
                                            jLabel3.setText(horseName);
                                            System.out.println("?>> > : " + counter.trim() + " " + horseName);

//                                             System.out.println("?>> > : "+ horseName);
//                                            int horse_counter = Integer.parseInt(counter.trim());
//                                            Horse horse = new Horse(null, horseName, PoraController.serchMaxPoraId() - 1, maxCountryId - 1, horse_counter);
                                            //HorseController.addHorse(horse);
                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            }

                        }

                    } catch (IOException e) {
                        //
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }).start();


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jProgressBar1.setVisible(true);
        new Thread(new Runnable() {

            public void run() {
                System.gc();

                for (int i = 0; i < 101; i++) {

                    try {
                        jProgressBar1.setValue(i);
                        jLabel2.setText(i + " %");

                        if (i <= 18) {
                            //                            Thread.sleep(500);
                            Thread.sleep(50);

                        } else if (i <= 83) {
                            //                            Thread.sleep(1000);
                            Thread.sleep(100);

                        } else if (i <= 100) {
                            //                            Thread.sleep(200);
                            Thread.sleep(20);

                        }

                        if (i == 100) {

                        }

                    } catch (Exception e) {
                    }
                }
            }
        }).start();

        new Thread(new Runnable() {

            public void run() {
                System.gc();

                try {

                    //delete all country and pora before next day   
                    CountryController.TruncateHorse();
                    CountryController.TruncatePora();
                    CountryController.TruncateCountry();

                    FileReader fr = null;
                    BufferedReader br = null;
                    try {
                        fr = new FileReader("D:\\scan\\2018.12.19/3.txt");
                        br = new BufferedReader(fr);
                    } catch (FileNotFoundException e) {
                        System.out.println("File Not Found");
                    }
                    String lines;
                    int Country = 1;
                    StringBuffer sb1 = null;
                    String racePora = null;
                    String horseName = null;
                    String counter = null;
                    int maxCountryId = 0;
                    try {

                        while ((lines = br.readLine()) != null) {

                            String s2 = new String(lines.replaceAll("'", ""));
                            if (!s2.equals("")) {

                                char ch = s2.charAt(0);
                                if (Character.isLetter(ch)) {
                                    if (!lines.substring(2, 3).equals("/")) {
                                        sb1 = new StringBuffer();
                                        sb1.append(ch).trimToSize();
                                        try {

                                            for (int i = 0; i < sb1.length(); i++) {
                                                Country cntry = new Country(Country, lines.trim());

                                                System.out.println("countr : " + lines.trim());
                                                CountryController.addCountry(cntry);
                                                Country++;
                                            }
                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }

                                char ch2 = s2.charAt(0);
                                char ch3 = s2.charAt(1);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                if (Character.isLetter(ch)) {
                                    if (lines.substring(2, 3).equals("/")) {
                                        // System.out.println("pora" + lines.substring(2, 3));
                                        maxCountryId = CountryController.serchMaxCountryId();

                                        if (s2.charAt(4) == ' ') {
                                            String poras = "" + s2.charAt(0) + s2.charAt(1) + "" + s2.charAt(2) + "" + s2.charAt(3);
                                            String aa = poras.replaceAll("\\s+", "");
                                            String pp = aa.replaceAll("'", "");
                                            String kk = pp.replaceAll("/", "");

                                            Pora pora = new Pora(null, maxCountryId - 1, kk);
                                            PoraController.addPora(pora);
                                            // System.out.println("|| " + pp);
                                            System.out.println("|| " + kk);
                                        } else if (s2.charAt(5) == ' ') {
                                            String poras = "" + s2.charAt(0) + s2.charAt(1) + "" + s2.charAt(2) + "" + s2.charAt(3) + "" + s2.charAt(4);
                                            String aa = poras.replaceAll("\\s+", "");
                                            String pp = aa.replaceAll("'", "");
                                            String kk = pp.replaceAll("/", "");

                                            Pora pora = new Pora(null, maxCountryId - 1, kk);
                                            PoraController.addPora(pora);
                                            // System.out.println("|| " + pp);
                                            System.out.println(">> " + kk);
                                        }

                                    }
                                }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                if (!Character.isLetter(ch2)) {
                                    if (ch2 == '(') {

                                        if (s2.substring(2, 3).equals(")")) {
                                            horseName = "" + s2.substring(3);
                                            counter = s2.substring(1, 2);
                                        } else if (s2.substring(3, 4).equals(")")) {
                                            horseName = "" + s2.substring(4);
                                            counter = s2.substring(1, 3);
                                        }
                                        int RaceCountry = Country - 1;
                                        try {
                                            jLabel3.setText(horseName);
                                            System.out.println("?>> > : " + counter.trim() + " " + horseName);

//                                             System.out.println("?>> > : "+ horseName);
                                            int horse_counter = Integer.parseInt(counter.trim());
                                            Horse horse = new Horse(null, horseName, PoraController.serchMaxPoraId() - 1, maxCountryId - 1, horse_counter);
                                            HorseController.addHorse(horse);
                                        } catch (Exception ex) {
                                            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            }

                        }

                    } catch (IOException e) {
                        //
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }).start();


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            HorseController.DeleteQuery();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewOkCancelDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewOkCancelDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewOkCancelDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewOkCancelDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewOkCancelDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewOkCancelDialog dialog = new NewOkCancelDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
